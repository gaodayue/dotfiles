if &compatible
  set nocompatible
end

"--------------------------------------
"               Vundle
"--------------------------------------
" filetype off
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" 
" Plugin 'gmarik/Vundle.vim'
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'croaky/vim-colors-github'
" Plugin 'Lokaltog/vim-powerline'
" Plugin 'kien/ctrlp.vim'
" Plugin 'scrooloose/nerdtree'
" Plugin 'scrooloose/syntastic'
" Plugin 'tpope/vim-surround'
" Plugin 'tpope/vim-commentary'
" 
" if filereadable(expand("~/.vimrc.bundles.local"))
"   source ~/.vimrc.bundles.local
" endif
" 
" call vundle#end()
" filetype on

"--------------------------------------
"              vim-plug
"--------------------------------------
" install all plugins using :PlugInstall
if has("nvim")
    call plug#begin(stdpath('data') . '/plugged')
else
    call plug#begin('~/.vim/plugged')
endif

Plug 'altercation/vim-colors-solarized'
Plug 'croaky/vim-colors-github'
Plug 'Lokaltog/vim-powerline'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'

if has("nvim")
    Plug 'neovim/nvim-lspconfig'
endif

call plug#end()


" => Powerline
" -------------------------------------
set t_Co=256
set laststatus=2

" => Nerd Tree
" -------------------------------------
map <leader>nn :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark
map <leader>nf :NERDTreeFind<cr>
let NERDTreeIgnore=['.o$[[file]]', '.class[[file]]', '.pyc[[file]]']
let NERDTreeIgnore=['\.o$', '\.class$', '\.pyc$']

" => Syntastic
" -------------------------------------
let g:syntastic_json_checkers=['jsonlint']

" => Ctrl-P
" -------------------------------------
" <leader>f for search in buffer
nnoremap <silent> <leader>f :CtrlPBuffer<cr>
let g:ctrlp_max_height = 20
" let g:ctrlp_custom_ignore = 'node_modules\|^\.DS_Store\|^\.git\|^\.coffee'
if executable('ag')
    " Use ag for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" => ctags & cscope
" -------------------------------------
" look for tags first in `pwd`, and work up the tree towards the root if not found
set tags=./tags;/

" cscope
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag
    " check ctags for definition of a symbol before checking cscope, set to 0
    " if you want the reverse search order.
    set csto=1
    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    " show msg when any other cscope db added
    set cscopeverbose

    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Using 'CTRL-spacebar' to open results in horizontal split
    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    set timeoutlen=1000
endif
